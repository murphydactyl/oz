struct light_t
{
  vec4 position;
  vec3 diffuse;
	vec3 specular;
	float ks;
	float kd;
	float exponent;
};

struct material_t
{
  vec4 diffuse;
	vec4 specular;
	float opacity;
};


in vec4 C;
in vec4 P;
in vec3 N;
uniform int numLights;
uniform mat4 inv_v;
uniform float ambientBrightness;
uniform light_t light[10];
uniform material_t material;
uniform int showNormals;
out vec4 fragColor;


void main(void)
{
	vec3 diffuseTotal = vec3(0, 0, 0);
	vec3 specularTotal = vec3(0, 0, 0);
	for (int i = 0; i < numLights; i++) {
		vec3 L = normalize(vec3(light[i].position - P));
		
		float diffusePower = max(0, dot(L, N));
		diffuseTotal += light[i].kd * diffusePower * light[i].diffuse;
		
		if (diffusePower > 0 && showNormals == 0) {
			vec3 E = normalize(vec3(inv_v[3] - P));
			vec3 H = normalize(E + L);
			specularTotal += light[i].ks * pow(max(0, dot(H, N)), light[i].exponent) * light[i].specular;
		}
	}
	vec3 ambient = ambientBrightness * C.xyz;
	vec3 diffuse = diffuseTotal * material.diffuse.xyz;
	vec3 specular = specularTotal * material.specular.xyz;
	vec3 finalColor = ambient + diffuse + specular;
	fragColor = vec4(finalColor.xyz, material.opacity);
}